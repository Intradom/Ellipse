<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_border</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Game Paramters */

global.GAME_OVER_TIMER = 2; // seconds

// Graphics
global.ENEMY_SCALING_BASE = 5.0 / sprite_get_width(sp_enemy_absorb);
global.BG_BORDER = 8; // pixels

// Player
global.PLAYER_SPD = 5;

// Bullet
global.BULLET_SPD = 10;
global.BULLET_DRIFT = 10; // pixels
global.BULLET_RELOAD_TIME = 0.1; // seconds

// Spawner
//global.SPAWN_TIMER = 0.1; // seconds
global.SPAWN_TYPE_ABSORB_CHANCE = 0.5;
global.SPAWN_TYPE_COSINE_CHANCE = 0.15;
global.SPAWN_TYPE_ARROW_CHANCE = 0.05;
global.SPAWN_TYPE_BOUNCE_CHANCE = 0.25;
global.SPAWN_TYPE_STRAIGHT_CHANCE = 0.05;

// Enemy
global.ENEMY_BIG_RAD = 4;
global.ENEMY_HEALTH = 1;
global.ENEMY_SPD = 4;
global.ENEMY_COSINE_INC = 2; // deg per step
global.ENEMY_COSINE_AMP = 10; // pixels
global.ENEMY_COSINE_ANGLE_OFFSET = 90; // degrees
global.ENEMY_ARROW_SPD_REDUCTION = 1;

// Saves computation
global.ENEMY_RAD_BASE = sprite_get_width(sp_enemy_absorb) / 2.0 * global.ENEMY_SCALING_BASE;
// ******************************

randomize();

global.shots_fired = false;
global.game_over = false;
global.game_score = 1;

spawn_types[0] = obj_enemy_absorb;
spawn_types[1] = obj_enemy_cosine; 
spawn_types[2] = obj_enemy_arrow;
spawn_types[3] = obj_enemy_bounce; 
spawn_types[4] = obj_enemy_straight;

if (show_question("Only chase type?"))
{
    spawn_chances[0] = 0.5;
    spawn_chances[1] = 0.5;
    spawn_chances[2] = 0;
    spawn_chances[3] = 0;
    spawn_chances[4] = 0;
}
else if (show_question("Only target type?"))
{
    spawn_chances[0] = 0;
    spawn_chances[1] = 0;
    spawn_chances[2] = 1;
    spawn_chances[3] = 0;
    spawn_chances[4] = 0;
}
else if (show_question("Only line type?"))
{
    spawn_chances[0] = 0;
    spawn_chances[1] = 0;
    spawn_chances[2] = 0;
    spawn_chances[3] = 0;
    spawn_chances[4] = 1;
}
else if (show_question("Only bounce type? (Otherwise mixed types)"))
{
    spawn_chances[0] = 0;
    spawn_chances[1] = 0;
    spawn_chances[2] = 0;
    spawn_chances[3] = 1;
    spawn_chances[4] = 0;
}
else
{
    spawn_chances[0] = global.SPAWN_TYPE_ABSORB_CHANCE;
    spawn_chances[1] = global.SPAWN_TYPE_COSINE_CHANCE; 
    spawn_chances[2] = global.SPAWN_TYPE_ARROW_CHANCE;
    spawn_chances[3] = global.SPAWN_TYPE_BOUNCE_CHANCE; 
    spawn_chances[4] = global.SPAWN_TYPE_STRAIGHT_CHANCE;
}

can_spawn = true;

alarm[1] = room_speed;

instance_create(room_width / 2, room_height / 2, obj_player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_score += 1;

alarm[1] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_spawn = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Spawn enemy if possible
if (can_spawn)
{
    var spawn_x;
    var spawn_y;
    var spawn_dir = irandom(3);
    var enemy_rad = global.ENEMY_RAD_BASE;
    if (spawn_dir == 0) // up
    {
        spawn_x = enemy_rad + global.BG_BORDER + (room_width - enemy_rad - global.BG_BORDER) * random(1);
        spawn_y = enemy_rad + global.BG_BORDER;
    }
    if (spawn_dir == 1) // down
    {
        spawn_x = enemy_rad + global.BG_BORDER + (room_width - enemy_rad - global.BG_BORDER) * random(1);
        spawn_y = room_height - enemy_rad - global.BG_BORDER;
    }
    if (spawn_dir == 2) // left
    {
        spawn_x = enemy_rad + global.BG_BORDER;
        spawn_y = enemy_rad + global.BG_BORDER + (room_height - enemy_rad - global.BG_BORDER) * random(1);
    }
    if (spawn_dir == 3) // right
    {
        spawn_x = room_width - enemy_rad - global.BG_BORDER;
        spawn_y = enemy_rad + global.BG_BORDER + (room_height - enemy_rad - global.BG_BORDER) * random(1);
    }
    
    // Determine enemy type
    var random_type = random(1);
    var enemy_type;
    var cp = 0;
    
    var i;
    for (i = 0; i &lt; array_length_1d(spawn_chances); ++i)
    {
        cp += spawn_chances[i];
        if (random_type &lt; cp)
        {
            enemy_type = spawn_types[i];
            break;
        }
    }
    
    var enemy_id = instance_create(spawn_x, spawn_y, enemy_type);
    enemy_id.image_xscale *= global.ENEMY_SCALING_BASE;
    enemy_id.image_yscale *= global.ENEMY_SCALING_BASE;
       
    can_spawn = false;
    alarm[0] = room_speed * scale_difficulty(global.game_score);//global.SPAWN_TIMER;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_text(0, 0, "Score: " + string(global.game_score));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
