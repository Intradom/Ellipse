<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_enemy_cosine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inc_x = 0;
inc_y = 0;
hp = global.ENEMY_HEALTH;
spd = global.ENEMY_SPD;

radius = 1;
osc_offset = -global.ENEMY_COSINE_AMP;
inc = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &lt;= 0)
{
    instance_destroy();
}
else
{
    var player_x;
    var player_y;
    var move_dir;
    
    player = instance_find(obj_player, 0);
    player_x = player.x;
    player_y = player.y;
    
    move_dir = point_direction(x, y, player_x, player_y);
    inc_x = spd * dcos(move_dir) + osc_offset * dsin(global.ENEMY_COSINE_ANGLE_OFFSET);
    inc_y = spd * dsin(move_dir) + osc_offset * dsin(global.ENEMY_COSINE_ANGLE_OFFSET);
        
    x += inc_x;
    y -= inc_y;
    
    osc_offset += global.ENEMY_COSINE_INC * inc;
    if (osc_offset &gt; global.ENEMY_COSINE_AMP)
    {
        inc = -1;   
    }
    else if (osc_offset &lt; -global.ENEMY_COSINE_AMP)
    {
        inc = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_cosine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hp_growth = other.hp;
var absorb = false;
if (radius == other.radius)
{
    if (id &lt; other.id)
        absorb = true;           
}
else if (radius &gt; other.radius)
{
    absorb = true;  
}

if (absorb)
{
    var new_rad = sqrt(power(radius, 2) + power(other.radius, 2));
    image_xscale *= new_rad / radius;
    image_yscale *= new_rad / radius;
    radius = new_rad;
    hp += hp_growth;
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
